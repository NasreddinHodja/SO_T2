#+TITLE: 7b - Exemplos de uso de fork() e exec()

* 1
#+begin_src c :exports both
main() {
    int ret1, ret2;
    ret1 = fork();
    ret2 = fork();
    printf("Programa em execução.\n");
}
#+end_src

#+results:
: Programa em execução.
: Programa em execução.
: Programa em execução.
: Programa em execução.

*OBS*: A sequência inferida na nossa explicação não corresponde à ordem de execução dos comandos, mas sim à ordem dos comandos no código. Isto se aplica para o resto dos ítens do exercício.

+ o programa original inicializa 2 inteiros ~ret1~ e ~ret2~
+ em seguida, o programa produz um processo novo usando ~fork()~
  - temos um ~ret1~ no processo original, que recebeu o /PID/ do filho
  - temos um ~ret1~ no processo filho, que recebeu 0
+ por fim, ambos o programa original e o filho criado no passo anterior criam um novo processo usando ~fork()~ e o mesmo comportamento se repete para o processo original e o primeiro filho criado
  - *processo original* cria um segundo filho, ~ret2~ recebe o /PID/ deste processo
  - *segundo filho* é criado, seu ~ret2~ recebe 0
  - *primeiro filho* cria um terceiro filho, ~ret2~ recebe o /PID/ deste processo
  - *terceiro filho* é criado, seu ~ret2~ recebe 0
+ como resultado, temos 4 processos que printam ~Programa em execução.~

* 2
#+begin_src c :exports both
main() {
    int ret;
    ret = fork();
    if(ret == 0)
        execl("/bin/ls", "ls", 0);
    else
        printf("Processo continua executando.\n");
}
#+end_src

#+results:
: Processo continua executando.
: a  a.c

+ temos um processo criando um filho usando ~fork()~
  - ~ret~ do processo pai recebe o /PID/ do filho
  - ~ret~ do processo filho recebe 0
+ assim, através do controle de fluxo ~if else~ com condição ~(ret == 0)~ permite-se que a função ~execl()~ seja executada apenas no processo filho e substitui a imagem deste processo pela imagem do processo que executa o arquivo passado, com argumentos:
  1. ~"/bin/ls"~
     + como de costume com esta família de funções /exec/, o primeiro argumento é o nome do arquivo a ser executado, e o resto são argumentos para o arquivo a ser executado
     + no nosso caso, o comando ~ls~, situado na pasta ~/bin/~ (por convenção), é chamado
  2. ~"ls"~
     + por convenção, o primeiro argumento é o nome do comando
  3. ~0~
     + indica o final da lista de argumentos para o comando ~ls~
+ por isto, o processo filho printa o conteúdo do diretório em que o programa foi executado:
  : a a.c
+ o processo pai executa o bloco do ~else~, printando:
  : Processo continua executando

* 3
#+begin_src c :exports both
main() {
    int ret;
    ret = fork();
    if(ret == 0) {
        execl("/bin/ls", "ls", 0);
        printf("Quando este comando será executado?\n");
    }
    printf("Por que a função printf anterior não foi executada?\n");
}
#+end_src

#+results:
: Por que a função printf anterior não foi executada?
: a  a.c

+ aqui temos uma variação do programa anterior que explicita o funcionamento de ~execl~
+ por causa do controle de fluxo, apenas o processo filho executa ~execl~, substituindo sua imagem pela imagem de ~ls~
+ por isso, o processo filho não irá executar nenhum comando do programa original após o ~execl~
+ portanto, vemos apenas um print ~Por que a função printf anterior não foi executada?~, nenhum print ~Quando este comando será executado?~, e um print do comando ~ls~
